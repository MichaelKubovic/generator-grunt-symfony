<?php
/**
 * Copyright (c) 2015 Ben ZÃ¶rb
 * Licensed under the MIT license.
 * http://bezoerb.mit-license.org/
 */

namespace Utils\GruntBundle\Eventlistener\HttpKernel;

use Symfony\Component\Config\ConfigCache;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\Config\FileLocator;
use Symfony\Component\HttpKernel\Event\KernelEvent;
use Symfony\Component\Translation\Loader\JsonFileLoader;
use Symfony\Component\Translation\MessageCatalogue;
use Utils\GruntBundle\Templating\Asset\FilerevPackage;

/**
 * Inject filerev package to assethelper on kernel event
 * Considers summary file generated by grunt-filerev
 *
 * Class FilerevPackageInjector
 *
 * @package FilerevAssetsBundle\Eventlistener\HttpKernel
 */
class FilerevPackageInjector
{
    /**
     * Service container
     *
     * @var ContainerInterface
     */
    protected $container;

    /**
     * Holds data from grunt-filerev
     *
     * @var MessageCatalogue
     */
    protected $catalogue;

    /**
     * Constructor
     *
     * @param ContainerInterface $container
     */
    public function __construct(ContainerInterface $container)
    {
        $this->container = $container;
    }

    /**
     * Inject custom Asset package to Kernel assets helper
     *
     * @param KernelEvent $event
     */
    public function onKernelRequest(KernelEvent $event)
    {
        if (!$event->isMasterRequest()) {
            return;
        }

        // retrieve needed params
        $kernel = $this->container->get('kernel');
        $environment = $kernel->getEnvironment();
        $nodeEnvironment = $this->container->getParameter('grunt.environment');

        // cachebusting shouldn't be applied in node environment
        // BrowserSync delivers files from app/Resources
        if ($environment != $nodeEnvironment) {

            // defaulrts to web folder
            $rootDir = $this->container->getParameter('grunt.filerev.root_dir');

            $package = new FilerevPackage();
            $package->setRoot($rootDir);

            // catalogue holds rev data from grunt-filerev
            // generated by the command `grunt rev` which is called during the build process
            $this->initializeCacheCatalogue();
            $package->setSummary($this->catalogue);

            $assetsHelper = $this->container->get('templating.helper.assets');
            $assetsHelper->setDefaultPackage($package);
        }
    }

    /**
     * Initialize filerev catalogue from filerev.json
     */
    protected function initializeCatalogue()
    {
        // try to fetch config file generated by grunt filerev
        // use empty cataloge if file does not exist
        $locator = new FileLocator(__DIR__ . '/../../Resources/config');
        try {
            $resources = $locator->locate('filerev.json', null, false);

            if (is_array($resources) && count($resources)) {
                $resource = array_shift($resources);
                $loader = new JsonFileLoader();
                $this->catalogue = $loader->load($resource, null);
                return;
            }

        } catch (\InvalidArgumentException $e) {
            // no summary set
        }

        $this->catalogue = new MessageCatalogue(null);
    }



    /**
     * Initialize filerev catalogue from cache
     * or generate cache if not already available
     */
    private function initializeCacheCatalogue()
    {
        if (isset($this->catalogue)) {
            return;
        }

        $debug = $this->container->getParameter('grunt.debug');
        $cache = new ConfigCache($this->getCatalogueCachePath(), $debug);
        if (!$cache->isFresh()) {
            $this->initializeCatalogue();

            $content = sprintf(<<<EOF
<?php

use Symfony\Component\Translation\MessageCatalogue;

\$catalogue = new MessageCatalogue(null, %s);

return \$catalogue;

EOF
                ,
                var_export($this->catalogue->all(), true)
            );

            $cache->write($content, $this->catalogue->getResources());

            return;
        }

        $this->catalogue = include $cache;
    }

    /**
     * Cache path
     *
     * @return string
     */
    protected function getCatalogueCachePath()
    {
        $cacheDir = $this->container->getParameter('grunt.filerev.cache_dir');
        return $cacheDir.'/filerev.summary.php';
    }

} 